using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace XbeLib.Crypto
{
    public static class PublicKey
    {
        public static byte[] Modulus = new byte[]
            {0xd3,0xd7,0x4e,0xe5, 0x66,0x3d,0xd7,0xe6, 0xc2,0xd4,0xa3,0xa1, 0xf2,0x17,0x36,0xd4,
             0x2e,0x52,0xf6,0xd2, 0x02,0x10,0xf5,0x64, 0x9c,0x34,0x7b,0xff, 0xef,0x7f,0xc2,0xee,
             0xbd,0x05,0x8b,0xde, 0x79,0xb4,0x77,0x8e, 0x5b,0x8c,0x14,0x99, 0xe3,0xae,0xc6,0x73,
             0x72,0x73,0xb5,0xfb, 0x01,0x5b,0x58,0x46, 0x6d,0xfc,0x8a,0xd6, 0x95,0xda,0xed,0x1b,
             0x2e,0x2f,0xa2,0x29, 0xe1,0x3f,0xf1,0xb9, 0x5b,0x64,0x51,0x2e, 0xa2,0xc0,0xf7,0xba,
             0xb3,0x3e,0x8a,0x75, 0xff,0x06,0x92,0x5c, 0x07,0x26,0x75,0x79, 0x10,0x5d,0x47,0xbe,
             0xd1,0x6a,0x52,0x90, 0x0b,0xae,0x6a,0x0b, 0x33,0x44,0x93,0x5e, 0xf9,0x9d,0xfb,0x15,
             0xd9,0xa4,0x1c,0xcf, 0x6f,0xe4,0x71,0x94, 0xbe,0x13,0x00,0xa8, 0x52,0xca,0x07,0xbd,
             0x27,0x98,0x01,0xa1, 0x9e,0x4f,0xa3,0xed, 0x9f,0xa0,0xaa,0x73, 0xc4,0x71,0xf3,0xe9,
             0x4e,0x72,0x42,0x9c, 0xf0,0x39,0xce,0xbe, 0x03,0x76,0xfa,0x2b, 0x89,0x14,0x9a,0x81,
             0x16,0xc1,0x80,0x8c, 0x3e,0x6b,0xaa,0x05, 0xec,0x67,0x5a,0xcf, 0xa5,0x70,0xbd,0x60,
             0x0c,0xe8,0x37,0x9d, 0xeb,0xf4,0x52,0xea, 0x4e,0x60,0x9f,0xe4, 0x69,0xcf,0x52,0xdb,
             0x68,0xf5,0x11,0xcb, 0x57,0x8f,0x9d,0xa1, 0x38,0x0a,0x0c,0x47, 0x1b,0xb4,0x6c,0x5a,
             0x53,0x6e,0x26,0x98, 0xf1,0x88,0xae,0x7c, 0x96,0xbc,0xf6,0xbf, 0xb0,0x47,0x9a,0x8d,
             0xe4,0xb3,0xe2,0x98, 0x85,0x61,0xb1,0xca, 0x5f,0xf7,0x98,0x51, 0x2d,0x83,0x81,0x76,
             0x0c,0x88,0xba,0xd4, 0xc2,0xd5,0x3c,0x14, 0xc7,0x72,0xda,0x7e, 0xbd,0x1b,0x4b,0xa4};

        //public static BigInteger N = PrepareBigInteger(Modulus);

        private static BigInteger PrepareBigInteger(byte[] unsignedBigEndian)
        {
            // Leave an extra 0x00 byte so that the sign bit is clear
            byte[] tmp = new byte[unsignedBigEndian.Length + 1];
            Buffer.BlockCopy(unsignedBigEndian, 0, tmp, 1, unsignedBigEndian.Length);
            Array.Reverse(tmp);
            return new BigInteger(tmp);
        }

        public static byte[] Decrypt(byte[] signature)
        {

            BigInteger n = PrepareBigInteger(Modulus.Reverse().ToArray());
            BigInteger e = 65537;
            BigInteger msg = PrepareBigInteger(signature.Reverse().ToArray());

            BigInteger decryptedInt = BigInteger.ModPow(msg, e, n);
            signature = decryptedInt.ToByteArray().Reverse().ToArray();
            signature = signature.Reverse().ToArray();
            return signature;
        }

        // You will need to provide your own `Red Public` key ;)
        // Search some places you think it might be. It will be prefixed with the following bytes:
        // 52 53 41 32 08 01 00 00 00 08 00 00 FF 00 00 00 01 00 01 00
        // 0x100 bytes long. No need to include the prefix
        public static byte[] DecryptRed(byte[] signature)
        {

            byte[] redPublic;

            try
            {
                redPublic = File.ReadAllBytes(@".\keys\RedPublic.bin");
            }
            catch (Exception exception)
            {
                Console.WriteLine("Error reading 'Red Public Key'");
                Console.WriteLine(exception.Message);
                Console.WriteLine("Save your 'Red Public Key' as a file named 'RedPublic.bin' in a folder named 'keys'\n");
                return new byte[] { };
            }

            BigInteger n = PrepareBigInteger(redPublic.Reverse().ToArray());
            BigInteger e = 65537;
            BigInteger msg = PrepareBigInteger(signature.Reverse().ToArray());

            BigInteger decryptedInt = BigInteger.ModPow(msg, e, n);
            signature = decryptedInt.ToByteArray().Reverse().ToArray();
            signature = signature.Reverse().ToArray();
            return signature;
        }

    }
}
